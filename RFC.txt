                             RFC For .2.mail

Protocol Designed By: Andrew Calvano and Lukyan Hritsko


---------------------------Protocol Overview----------------------------------

In a world without data centers computers rely on an internet known as the .2. 
Internet.  The .2.mail protocol is a protocol built specifically for this type
of internet and makes some assumptions as a result of this.

Assumption 1.) The sender and receiver each contain the Internet protocol stack. 

Assumption 2.) The sender always knows the IP address of the receiver. 

Assumption 3.) Messages are unformatted ASCII text of no more than 5000 characters including spaces. 

Assumption 4.) A receiver may not always have the .2.mail service running. 

Assumption 5.) A receiver may not always be online. 

Using these assumptions this RFC lays out the implementation notes required
to make a sucessful implementation of the .2.mail protocol.


---------------------Peer Message Exchange and Actions--------------------

This section describes the messages exchanged between two peers in a .2. 
internet using the .2.mail protocol.  We will illustrate with an FSM for
a peer acting as a receiver and a peer acting as a sender.

Sender FSM:

S     |          Send data packet with data size <= 5000, 
      |          hash of message data, and sequence number i
----->|-------------------------------------------------------
Reset |                                                       |
From  |                                                       |
Time  |                                                       |
Out   |<-------------------------------------------------------
      |
      |
      |          Wait for Ack message from recipient with sequence number i + 1,
      |          Start offline timer of 20 seconds, start polling timer of 5 
      |          seconds.  Ignore messages, with invalid sequence numbers.
      |--------------------------------------------------------
      |                                                        |
      |                                                        |
      |<------------------------------------------------------- 
      |
      |           No more message is left to send.  Send
      |           a FIN message.
      |--------------------------------------------------------
      |                                                        |
      |                                                        |
      |<-------------------------------------------------------
      |
      |           Receive a correctly formatted FIN ACK msg
      |           from receiver.  Exit.
      |--------------------------------------------------------
      |                                                        |
      |                                                        |
      |<-------------------------------------------------------
      |
      |

Receiver FSM:

R     |          
      |     Recv a data message with sequence number i.  Compute hash
      |     of the data message body and compare with hash in header.
      |    
----->|-------------------------------------------------------
Reset |                                                       |
From  |                                                       |
Fin   |                                                       |
Msg   |<-------------------------------------------------------
      |
      |
      |        
      |       
      |      If there is a bad hash, send an error flag in ACK
      |      message to the sender.
      |--------------------------------------------------------
      |                                                        |
      |                                                        |
      |<------------------------------------------------------- 
      |
      |   Recv a data message with sequence number i+1.  Compute hash of the data
      |   message body and compare with hash in header.
      |-------------------------------------------------------
      |                                                       |
      |                                                       |
      |<------------------------------------------------------
      |
      |
      |  Receive a FIN message from sender. Send a Fin ACK and reset.
      |-------------------------------------------------------
      |                                                       |
      |                                                       |
      |<------------------------------------------------------ 
      
      


--------------------------------------------------------------------------

                                Message Structure


Data Message


            Bytes 0-------4------------------------------20

               Sequence # | hash of message
                    
            Bytes 20-------------------------------------
		    
                     Message (up to 5000 bytes)

The data message consists of a header and a data portion.  The header contains
the sequence number and an md5 hash of the actual message.  After these first
20 bytes is the actual message which can be up to 5000 bytes long.

Ack Message
           
          Bytes 0-----------4-----------5 
                 Ack Number | Error Flag

The ack message is 5 bytes long and consists of two fields the ack number and the error flag.
The ack number is the sequence number of the received data message + 1.  For every,
data message sent to the receiever there is an ack message sent to the sender who will
not send the next message in sequence until receiving the correct ack number.
The error flag is set to 1 and is sent to the sender to let the sender know that the message
provided did not match the hash of the message in the data message header. 


Fin Message

A FIN Message is the exact same thing as an ACK message except that the ACK number will be 
set to 0xFFFFFFFF.

Fin ACK Message

A FIN ACK message is also a modification of the Ack message.  The reciever will send an
ACK message with sequence number 0 to the reciever.  If the sender is expecting a FIN
ACK message at this point, then the sender will receive this determine its correct, and
exit.  The reciever will then reset.

------------------------Semantics of the .2.mail Protocol------------------------------

Using the above types of messages we set out to satisfy the following requirements:


1.)    No use of services beyond those provided by the sender and receiver are allowed (that is, no service provided by a server may be used).
2.)    A sender must be able to send a text message to an online receiver.
3.)    The received message must be the same as the sent message (that is, it must not be corrupted).
4.)    The received message must indicate who the sender is (by IP address).
5.)    If a receiver is offline when a server has a message to send to it, the message must be sent by the sender within t_delay seconds of the receiver coming back online.
        a.) Polling the receiver using a TCP connection request is not allowed 
6.)    If a receiver is offline for more than t_offline seconds, the message shall not be delivered (that is, the sender should drop the message).
        a.) You may assume that t_offline is an even multiple of t_delay 
7.)    The protocol must be reasonably tolerant of rare lost packets 

The time out schedule for the .2. mail protocol is as follows:

A sender will repeatedly try to send a message to a receiver every 5 seconds.  The sender will continually
do this until the sender receives a correctly formatted ACK message from the recipient.

The sender will do this 4 times before timeing out completely and disregarding the message for a total
time of 20 seconds.

Every time a correctly formatted ACK message is received the timer is completely reset.

This also combats the issue when the receiver is not online because the sender will "poll" the receiver 
continuously every 5 seconds by sending the message over again.  We do not use a TCP connection for this
but rather the same data messages that send regular messages with an added timer which are over UDP.

Sequence Numbers and Lost Packets:

A sender will send a message initally with a sequence number of i.  For every message sent to the receiver,
the receiver must return an ACK or FIN message to the sender with a sequence number of i+1.

The sender will continuously loop until timeout, until a correct sequence number is received in a correctly
formatted ACK message.

Completion of Communication:

Once the sender has finished sending the contents of its message from the text file,
it will send a FIN message to let the receiver know not to expect any more data from
the sender.  The sender will then block and wait for a FIN ACK message from the 
receiver.  Once this FIN ACK message is received the sender wil exit.

Identification:  

The UDP datagram implicitly includes the IP address of the sender.  We use this information
to satisfy requirement 5.

Corruption:

Each data message includes an MD5 hash of the message in the body of the datagram.  The receiver
compute the hash of the message body each time it receives a message and compares it to the hash
in the header of the datagram. 

If the header hash is correct, communication continues as usual.  If it is incorrect, the receiver
sends an ACK message with the correct sequence number but with the error flag set to 1.  This tells
the sender that something was wrong and the sender will then resend the message again.

-------------------------------------End of RFC------------------------------------------------------------
           
 

